@using Luval.AuthMate.Core.Entities
@using System.Web
@using Microsoft.AspNetCore.Http

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject IHttpContextAccessor contextAccessor

<script src="https://cdnjs.cloudflare.com/ajax/libs/UAParser.js/1.0.2/ua-parser.min.js"></script>
<script>
    async function getDeviceInfo() {

    // Use UAParser.js to get OS and Browser details
    const parser = new UAParser();
    const result = parser.getResult();

    return {
    IpAddress: '', // Extracted from the external service
    OS: `${result.os.name} ${result.os.version}`,
    Browser: `${result.browser.name} ${result.browser.version}`
    };
    }
</script>

<FluentButton @onclick="OnClickNavigate">
    <FluentIcon Value="@(new AuthMateIcons.GoogleLogo())" Color="Color.Error" Slot="start" />
    @ButtonText
</FluentButton>

@code {
    [Parameter]
    public string ButtonText { get; set; } = "Google Authenticate";

    [Parameter]
    public string NavigateTo { get; set; } = "/auth/google-login";

    [Parameter]
    public string ReturnUrl { get; set; } = "/";

    private DeviceInfo DeviceInfo { get; set; } = default(DeviceInfo);

    private void OnClickNavigate(MouseEventArgs e)
    {
        var info = string.Empty;
        if (DeviceInfo != null) info = DeviceInfo.ToString();
        info = HttpUtility.HtmlEncode(info);
        Navigation.NavigateTo(string.Format("{0}?deviceInfo={1}&returnUrl={2}", NavigateTo, info, HttpUtility.HtmlEncode(ReturnUrl)));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await GetDeviceInfo();
    }

    private async Task GetDeviceInfo()
    {
        // Call the JavaScript function
        DeviceInfo deviceInfo = default;
        try
        {
            deviceInfo = await JSRuntime.InvokeAsync<DeviceInfo>("getDeviceInfo");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        if (deviceInfo != null)
            deviceInfo.IpAddress = contextAccessor.HttpContext?.Connection.RemoteIpAddress?.ToString() ?? "Unknown";
        DeviceInfo = deviceInfo;

    }
}
