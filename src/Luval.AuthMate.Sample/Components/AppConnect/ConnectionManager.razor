@using Luval.AuthMate.Sample.Infrastructure.Data

<FluentDataGrid Items="@Connections">
    <PropertyColumn Title="Name" Property="@(p => p.ProviderName)" Sortable="true" />
    <PropertyColumn Title="Email" Property="@(p => p.UserAccount)" Sortable="true" />
    <PropertyColumn Title="Scopes" Property="@(p => p.Scopes)" Sortable="true" />
    <PropertyColumn Title="IssuedOn" Property="@(p => p.IssuedOn)" Format="yyyy-MM-dd" Sortable="true" />
    <PropertyColumn Title="ExpireOn" Property="@(p => p.ExpiresOn)" Format="yyyy-MM-dd" Sortable="true" />
    <TemplateColumn Title="Actions" Align="@Align.End">
        <FluentButton aria-label="Edit item" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
        <FluentButton aria-label="Delete item" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Delete())" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
    </TemplateColumn>
</FluentDataGrid>
<div style="padding:10px;"></div>
<FluentButton IconStart="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.CloudAdd())"
              Appearance="Appearance.Accent"
              OnClick="@(() => OpenDialogAsync(null, false))">
    Add Connection
</FluentButton>



@code {

    [Inject]
    public IUserResolver UserResolver { get; set; } = default!;

    [Inject]
    public required IDialogService DialogService { get; set; } = default!;

    [Inject]
    public required OAuthConnectionManager ConnectionConfigManager { get; set; } = default!;

    [Inject]
    public required AppConnectionService ConnectionService { get; set; } = default!;

    [Inject]
    public required NavigationManager Navigation { get; set; }

    public IQueryable<ConnectionDto> Connections { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var tz = UserResolver.GetUserTimezone();
            Connections = (await ConnectionService.GetAllConnectionsAsync())
                .Select(i => new ConnectionDto()
                    {
                        ExpiresOn = TimeZoneInfo.ConvertTimeFromUtc(i.UtcExpiresOn, tz),
                        IssuedOn = TimeZoneInfo.ConvertTimeFromUtc(i.UtcIssuedOn, tz),
                        ModifiedOn = TimeZoneInfo.ConvertTimeFromUtc(i.UtcUpdatedOn.Value, tz),
                        ProviderName = i.ProviderName,
                        Scopes = i.Scope,
                        UserAccount = i.OwnerEmail,
                        Id = i.Id
                    });
            // get all connections for the account
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OpenDialogAsync(ConnectionDto? context, bool isEdit = true)
    {
        if (context == null) return;
        DialogParameters parameters = new()
            {
                Title = $"Connection Information",
                PrimaryAction = "Save",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        var dialog = await DialogService.ShowDialogAsync<ConnectionDialog>(context, parameters);
        DialogResult? result = await dialog.Result;

        if (!isEdit)
        {
            var dtp = result.Data as ConnectionDto;
            var config = ConnectionConfigManager.GetConfiguration(dtp.ProviderName);
            config.Scopes = dtp.Scopes;
            var url = ConnectionService.CreateAuthorizationConsentUrl(config, Navigation.BaseUri);
            await InvokeAsync(() => Navigation.NavigateTo(url));
        }
    }

}
